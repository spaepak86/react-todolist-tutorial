{"version":3,"sources":["components/TodoListTemplate.js","components/Form.js","components/TodoItems.js","components/TodoItemList.js","components/TodoPalette.js","App.js","serviceWorker.js","index.js"],"names":["TodoListTemplate","form","children","palette","className","Form","value","onChange","onCreate","onKeyPress","onClick","TodoItem","nextProps","nextState","this","props","checked","text","id","color","onToggle","onRemove","console","log","e","stopPropagation","style","Component","TodoItemList","todos","todoList","map","key","Color","active","background","Palette","colors","selected","onSelect","colorList","App","state","input","handleChange","setState","target","handleCreate","concat","handleKeyPress","handleToggle","index","findIndex","todo","nextTodos","handleRemove","filter","handleSelectColor","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1c6328fe.chunk.js","sourcesContent":["import React from 'react';\r\nimport './TodoListTemplate.css';\r\n\r\nconst TodoListTemplate = ({form, children, palette}) => {\r\n  return (\r\n    <main className=\"todo-list-template\">\r\n      <div className=\"title\">\r\n        오늘 할 일\r\n      </div>\r\n      <section className=\"form-wrapper\">\r\n        {form}\r\n      </section>\r\n      <section className=\"todos-wrapper\">\r\n        { children }\r\n      </section>\r\n      <section className=\"palette-wrapper\">\r\n        { palette }\r\n      </section>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default TodoListTemplate;","import React from 'react';\r\nimport './Form.css';\r\n\r\nconst Form = ({value, onChange, onCreate, onKeyPress}) => {\r\n  return (\r\n    <div className=\"form\">\r\n      <input value={value} onChange={onChange} onKeyPress={onKeyPress}/>\r\n      <div className=\"create-button\" onClick={onCreate}>\r\n        추가\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Form;","import React, { Component } from 'react';\r\nimport './TodoItems.css';\r\n\r\nclass TodoItem extends Component {\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return this.props.checked !== nextProps.checked;\r\n    }    \r\n\r\n    render() {\r\n        const { text, checked, id, color, onToggle, onRemove } = this.props;\r\n\r\n        console.log(id);\r\n\r\n        return (\r\n        <div className=\"todo-item\" onClick={() => onToggle(id)}>\r\n            <div className=\"remove\" onClick={(e) => {\r\n            e.stopPropagation(); // onToggle 이 실행되지 않도록 함\r\n            onRemove(id)}\r\n            }>&times;</div>\r\n            <div style={{color}} className={`todo-text ${checked && 'checked'}`}>\r\n            <div>{text}</div>\r\n            </div>\r\n            {\r\n            checked && (<div className=\"check-mark\">✓</div>)\r\n            }\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoItem;","import React, { Component } from 'react';\r\nimport TodoItem from './TodoItems';\r\n\r\nclass TodoItemList extends Component {\r\n    \r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    return this.props.todos !== nextProps.todos;\r\n  }\r\n\r\n  render() {\r\n    const { todos, onToggle, onRemove } = this.props;\r\n\r\n    const todoList = todos.map(\r\n        ({ id, text, checked, color }) =>(\r\n            <TodoItem\r\n                id={id}\r\n                text={text}\r\n                checked={checked}\r\n                color={color}\r\n                onToggle={onToggle}\r\n                onRemove={onRemove}\r\n                key={id}\r\n            />\r\n        )\r\n    );\r\n\r\n    /*\r\n    \r\n    const todoList = todos.map(\r\n        (todo) => (\r\n            <TodoItem\r\n                {...todo}\r\n                onToggle={onToggle}\r\n                onRemove={onRemove}\r\n                key={todo.id}\r\n            />\r\n        )\r\n    );\r\n\r\n    */\r\n\r\n    return (\r\n        <div>\r\n            {todoList}\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoItemList;","  import React from 'react';\r\nimport './TodoPalette.css';\r\n\r\nconst Color = ({ color, active, onClick }) => {\r\n  return (\r\n    <div className={`color ${active && 'active'}`} style={{ background: color}} onClick={onClick}>\r\n    \r\n    </div>\r\n  )\r\n}\r\n\r\nconst Palette = ({colors, selected, onSelect}) => {\r\n  const colorList = colors.map(\r\n    (color) => (<Color color={color} active={selected===color} onClick={() => onSelect(color)} key={color}/>)\r\n  );\r\n  return (\r\n    <div className=\"palette\">\r\n      {colorList}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Palette;","import React, { Component } from 'react';\nimport TodoListTemplate from './components/TodoListTemplate';\nimport Form from './components/Form';\nimport TodoItemList from './components/TodoItemList';\nimport Palette from './components/TodoPalette';\n\nconst colors = ['#343a40', '#f03e3e', '#12b886', '#228ae6'];\n\nclass App extends Component {  \n  id = 3 // 이미 0,1,2 가 존재하므로 3으로 설정\n\n  state = {\n    input: '',\n    todos: [\n      { id: 0, text: ' 리액트 소개', checked: false },\n      { id: 1, text: ' 리액트 소개', checked: true },\n      { id: 2, text: ' 리액트 소개', checked: false }\n    ],\n    color: '#343a40'\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      input: e.target.value // input 의 다음 바뀔 값\n    });\n  }\n\n  handleCreate = () => {\n    const { input, todos, color } = this.state;\n    this.setState({\n      input: '', // 인풋 비우고\n      // concat 을 사용하여 배열에 추가\n      todos: todos.concat({\n        id: this.id++,\n        text: input,\n        checked: false,\n        color\n      })\n    });\n  }\n\n  handleKeyPress = (e) => {\n    // 눌려진 키가 Enter 면 handleCreate 호출\n    if(e.key === 'Enter') {\n      this.handleCreate();\n    }\n  }\n  \n  handleToggle = (id) => {\n    const { todos } = this.state;\n\n    // 파라미터로 받은 id 를 가지고 몇번째 아이템인지 찾습니다.\n    const index = todos.findIndex(todo => todo.id === id);\n    const selected = todos[index]; // 선택한 객체\n\n    const nextTodos = [...todos]; // 배열을 복사\n\n    // 기존의 값들을 복사하고, checked 값을 덮어쓰기\n    nextTodos[index] = { \n      ...selected, \n      checked: !selected.checked\n    };\n\n    this.setState({\n      todos: nextTodos\n    });\n  }\n/*\n  handleToggle = (id) => {\n    const { todos } = this.state;\n    const index = todos.findIndex(todo => todo.id === id);\n\n    const selected = todos[index];\n\n    this.setState({\n      todos: [\n        ...todos.slice(0, index),\n        {\n          ...selected,\n          checked: !selected.checked\n        },\n        ...todos.slice(index + 1, todos.length)\n      ]\n    });\n  }*/\n  \n  handleRemove = (id) => {\n    const { todos } = this.state;\n    this.setState({\n      todos: todos.filter(todo => todo.id !== id)\n    });\n  }\n\n  handleSelectColor = (color) => {\n    this.setState({\n      color\n    })\n  }\n\n  render() {\n    const { input, todos, color } = this.state;\n    const {\n      handleChange,\n      handleCreate,\n      handleKeyPress,\n      handleToggle,\n      handleRemove,\n      handleSelectColor\n    } = this;\n\n    return (\n      <TodoListTemplate form={(\n        <Form\n          value={input}\n          onKeyPress={handleKeyPress}\n          onChange={handleChange}\n          onCreate={handleCreate}\n          color={color}\n        />\n      )}\n        palette={(          \n          <Palette colors={colors} selected={color} onSelect={handleSelectColor}/>\n        )}\n      >\n        <TodoItemList todos={todos} onToggle={handleToggle} onRemove={handleRemove} />\n      </TodoListTemplate>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}